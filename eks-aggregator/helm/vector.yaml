role: Stateless-Aggregator

image:
  tag: nightly-2021-09-16-distroless-libc

autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 5

resources:
  requests:
    cpu: 200m
    memory: 256Mi
  limits:
    cpu: 200m
    memory: 256Mi

env:
  - name: DATADOG_API_KEY
    valueFrom:
      secretKeyRef:
        name: vector
        key: DATADOG_API_KEY

podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "9090"

customConfig:
  api:
    enabled: true
    address: 0.0.0.0:8686
  sources:
    datadog_agents:
      type: datadog_agent
      acknowledgements: true
      address: 0.0.0.0:8080
    internal_metrics:
      type: internal_metrics
  transforms:
    remap:
      type: remap
      inputs:
        - datadog_agents
      drop_on_abort: true
      source: |
        # Parse the received .ddtags field so we can more easily access the contained tags
        .ddtags = parse_key_value!(.ddtags, key_value_delimiter: ":", field_delimiter: ",")
        .ddtags.sender = "vector"
        .ddtags.vector_aggregator = get_hostname!()

        if .service == "agent" {
          parsed, err =
            parse_grok(.message, s'(?<timestamp>%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{TIME}) UTC \| %{NOTSPACE:agent} \| %{LOGLEVEL:status} \| \(%{NOTSPACE:filename}:%{NUMBER:lineno} in %{WORD:process}\) \|( %{NOTSPACE:kv} \|)?( - \|)?( \(%{NOTSPACE:pyFilename}:%{NUMBER:pyLineno}\) \|)?%{GREEDYDATA}', remove_empty: true) ??
            parse_grok(.message, s'(?<timestamp>%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{TIME}) UTC \| %{LOGLEVEL:status} \| \(%{NOTSPACE:filename}:%{NUMBER:lineno} in %{WORD:process}\)%{GREEDYDATA}') ??
            parse_grok(.message, s'(?<timestamp>%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{TIME}) UTC \| %{NOTSPACE:agent} \| %{LOGLEVEL:status}\s+\| %{WORD:class} \| %{GREEDYDATA}')
          if err != null { log("Failed to parse agent log: " + string!(.message), level: "error"); abort }

          parsed |= parse_key_value(del(parsed.kv), key_value_delimiter: ":", field_delimiter: ",") ?? {}

          ts = parse_timestamp!(parsed.timestamp, format: "%F %T")
          parsed.timestamp = to_unix_timestamp(ts, unit: "milliseconds")
          parsed.lineno = to_int!(parsed.lineno)
          if exists(parsed.pyLineno) { parsed.pyLineno = to_int!(parsed.pyLineno) }

          . = merge(., parsed)
        }

        # Re-encode Datadog tags as a string for the `datadog_logs` sink
        .ddtags = encode_key_value(.ddtags, key_value_delimiter: ":", field_delimiter: ",")
  sinks:
    to_datadog:
      type: datadog_logs
      inputs:
        - remap
      default_api_key: "${DATADOG_API_KEY}"
      batch:
        timeout_secs: 5
      encoding:
        codec: json
    prom_exporter:
      type: prometheus_exporter
      inputs:
        - internal_metrics
      address: 0.0.0.0:9090

ingress:
  enabled: true
  annotations:
    alb.ingress.kubernetes.io/scheme: internal
    alb.ingress.kubernetes.io/healthcheck-port: '8686'
    alb.ingress.kubernetes.io/healthcheck-path: /health
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 8080}]'
    alb.ingress.kubernetes.io/target-type: ip
    kubernetes.io/ingress.class: alb
  hosts:
    - host: vector.mycompany.tld
      paths:
        - path: /
          pathType: Prefix
          port:
            name: datadog-agents
